'''
    You will only be writing code in this file and this is the only file submitted to the autograder.
'''
import platform
import csv
import os

def get_version():
    '''
        print the version of python that you are using.
    '''
    return platform.python_version()


def alternative_sum(start, n):
    '''
        modify the function to return a list with generated by an alternative sum sequence explained in the assignment handout
    '''
    if (n > 4 and n < 21):
        if start >= 0:
            result = [start]
            while len(result) < n:
                if len(result) >= 3:
                    num = result[-1] + result[-3]
                else:
                    num = 2*result[-1]
                result.append(num)
        else:
            result = []
    else:
        result = []
    return result
                


def order_scores():
    '''
        read the files scores.csv in the data directory and return the list of names sorted in ascending order of the scores.
    '''
    curr_dir = os.getcwd()
    file_path = os.path.join(curr_dir, 'data', 'scores.csv')
    final_list = []
    with open(file_path, newline='', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        final_dict = sorted(reader,key = lambda row : row['scores'])
        for row in final_dict:
            final_list.append(row['name'])
    return final_list
            
        # print(final_list)
    # file = open(file_path, 'r')
    # final_dict = {}
    # list = {}
    # header_dict = {}
    # first_line = next(file).strip()
    # first_name, first_scores = first_line.split(',')
    # header_dict[first_name] = first_scores
    
    # for line in file:
    #     name, scores = line.strip().split(',')        
    #     list[name] = scores
    #     sorted_dict  = dict(sorted(list.items(), key = lambda item : item[1]))
        
    # final_dict.update(header_dict)    
    # final_dict.update(sorted_dict)      
    
    # return final_dict
    
print(order_scores())